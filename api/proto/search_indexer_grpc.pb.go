// Copyright Contributors to the Open Cluster Management project

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: search_indexer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SearchIndexer_Sync_FullMethodName       = "/search.indexer.SearchIndexer/Sync"
	SearchIndexer_StreamSync_FullMethodName = "/search.indexer.SearchIndexer/StreamSync"
	SearchIndexer_Health_FullMethodName     = "/search.indexer.SearchIndexer/Health"
)

// SearchIndexerClient is the client API for SearchIndexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchIndexerClient interface {
	// Sync resources with the indexer
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	// Streaming sync for large requests - accepts chunked data
	StreamSync(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncChunk, SyncResponse], error)
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type searchIndexerClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchIndexerClient(cc grpc.ClientConnInterface) SearchIndexerClient {
	return &searchIndexerClient{cc}
}

func (c *searchIndexerClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, SearchIndexer_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchIndexerClient) StreamSync(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncChunk, SyncResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearchIndexer_ServiceDesc.Streams[0], SearchIndexer_StreamSync_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncChunk, SyncResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchIndexer_StreamSyncClient = grpc.ClientStreamingClient[SyncChunk, SyncResponse]

func (c *searchIndexerClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, SearchIndexer_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchIndexerServer is the server API for SearchIndexer service.
// All implementations must embed UnimplementedSearchIndexerServer
// for forward compatibility.
type SearchIndexerServer interface {
	// Sync resources with the indexer
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	// Streaming sync for large requests - accepts chunked data
	StreamSync(grpc.ClientStreamingServer[SyncChunk, SyncResponse]) error
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedSearchIndexerServer()
}

// UnimplementedSearchIndexerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchIndexerServer struct{}

func (UnimplementedSearchIndexerServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedSearchIndexerServer) StreamSync(grpc.ClientStreamingServer[SyncChunk, SyncResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSync not implemented")
}
func (UnimplementedSearchIndexerServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedSearchIndexerServer) mustEmbedUnimplementedSearchIndexerServer() {}
func (UnimplementedSearchIndexerServer) testEmbeddedByValue()                       {}

// UnsafeSearchIndexerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchIndexerServer will
// result in compilation errors.
type UnsafeSearchIndexerServer interface {
	mustEmbedUnimplementedSearchIndexerServer()
}

func RegisterSearchIndexerServer(s grpc.ServiceRegistrar, srv SearchIndexerServer) {
	// If the following call pancis, it indicates UnimplementedSearchIndexerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SearchIndexer_ServiceDesc, srv)
}

func _SearchIndexer_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchIndexerServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchIndexer_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchIndexerServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchIndexer_StreamSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearchIndexerServer).StreamSync(&grpc.GenericServerStream[SyncChunk, SyncResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchIndexer_StreamSyncServer = grpc.ClientStreamingServer[SyncChunk, SyncResponse]

func _SearchIndexer_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchIndexerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchIndexer_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchIndexerServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchIndexer_ServiceDesc is the grpc.ServiceDesc for SearchIndexer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchIndexer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.indexer.SearchIndexer",
	HandlerType: (*SearchIndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _SearchIndexer_Sync_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _SearchIndexer_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSync",
			Handler:       _SearchIndexer_StreamSync_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "search_indexer.proto",
}
